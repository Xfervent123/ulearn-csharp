/*
╔════════════════════════════════════════════════════════════════════╗
║                          СНОВА НЕЗНАКОМКА                          ║
╚════════════════════════════════════════════════════════════════════╝

Незнакомка вернулась!

На рабочем столе своего ноутбука Вася обнаружил огромный файл, 
начинающийся так:

    push Привет! Это снова я! Пока!
    pop 5
    push Как твои успехи? Плохо?
    push qwertyuiop
    push 1234567890
    pop 26
    ...

Кажется, предыдущая программа по расшифровке шифра больше не нужна —
незнакомка придумала новое испытание.

Вася вспомнил, что "push" и "pop" — это стандартные операции со стеком:
- push <строка> — дописать строку в конец текста;
- pop <n> — удалить n последних символов из текста.

Попробовав выполнить первые шесть операций, Вася получил текст:

    Привет! Это снова я! Как твои успехи?

Чтобы прочитать всё послание незнакомки, нужно обработать до конца
весь файл. Очевидно, без программы-декодировщика здесь не обойтись!


═══════════════════════════════════════════════════════════════════════

Пример работы программы:

Вход:
push Привет! Это снова я! Пока!
pop 5
push Как твои успехи?

Выход:
Привет! Это снова я! Как твои успехи?

═══════════════════════════════════════════════════════════════════════
*/

private static string ApplyCommands(string[] commands)
{
	var s = new StringBuilder();

	foreach (var e in commands)
	{
		if (e.Substring(0, 4) == "push") s.Append(e.Substring(5));
		else if (e.Substring(0, 3) == "pop")
		{
			var n = int.Parse(e.Substring(4));
			if (n > s.Length) n = s.Length;
			s.Length -= n;
		}
	}
	return s.ToString();
}